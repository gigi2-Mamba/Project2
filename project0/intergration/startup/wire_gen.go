// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"project0/internal/events/article"
	"project0/internal/repository"
	"project0/internal/repository/cache"
	"project0/internal/repository/dao"
	"project0/internal/service"
	"project0/internal/web"
	"project0/internal/web/ijwt"
	"project0/ioc"
)

// Injectors from wire.go:

// 首要的main先初始化webServer
func InitWebServerJ() *gin.Engine {
	cmdable := InitRedis()
	handler := ijwt.NewRedisJWTHandler(cmdable)
	loggerV1 := InitLogger()
	v := ioc.InitGinMiddlewares(cmdable, handler, loggerV1)
	db := InitDB()
	userDao := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCacheUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	v2 := ioc.NewSMSS()
	limiter := ioc.InitRedisLimiter(cmdable)
	smsService := ioc.InitSMSService(v2, limiter)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := InitWechatService(loggerV1)
	oAuth2Handler := web.NewOAuth2Handler(wechatService, userService, handler)
	articleDao := dao.NewArticleGROMDAO(db)
	articleHandler := InitArticleHandler(articleDao)
	engine := ioc.InitWebServer(v, userHandler, oAuth2Handler, articleHandler)
	return engine
}

func InitArticleHandler(daoArt dao.ArticleDao) *web.ArticleHandler {
	cmdable := InitRedis()
	articleCache := cache.NewArticleRedisCache(cmdable)
	db := InitDB()
	userDao := dao.NewUserDAO(db)
	articleRepository := repository.NewCacheArticleRepository(daoArt, articleCache, userDao)
	client := InitSaramaClient()
	syncProducer := InitSyncProducer(client)
	producer := article.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer)
	loggerV1 := InitLogger()
	interactiveCache := cache.NewInteractiveCache(cmdable)
	interactiveDAO := dao.NewInteractiveGORMDAO(db)
	interactiveRepository := repository.NewCacheInteractiveRepository(interactiveCache, interactiveDAO)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, loggerV1, interactiveService)
	return articleHandler
}

// wire.go:

var thirdPartySet = wire.NewSet(
	InitDB, InitRedis, InitLogger, ioc.InitRedisLimiter, ioc.NewSMSS, InitSaramaClient, InitSyncProducer,
)
