// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"project0/internal/events/article"
	"project0/internal/repository"
	"project0/internal/repository/cache"
	"project0/internal/repository/dao"
	"project0/internal/service"
	"project0/internal/service/sms/failover"
	"project0/internal/web"
	"project0/internal/web/ijwt"
	"project0/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

// 首要的main先初始化webServer
func InitWebServerJ() *App {
	cmdable := ioc.InitRedis()
	handler := ijwt.NewRedisJWTHandler(cmdable)
	loggerV1 := ioc.InitLogger()
	v := ioc.InitGinMiddlewares(cmdable, handler, loggerV1)
	db := ioc.InitDB(loggerV1)
	userDao := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewCacheUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	v2 := ioc.NewSMSS()
	limiter := ioc.InitRedisLimiter(cmdable)
	smsService := ioc.InitSMSService(v2, limiter)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := ioc.InitWechatService(loggerV1)
	oAuth2Handler := web.NewOAuth2Handler(wechatService, userService, handler)
	articleDao := dao.NewArticleGROMDAO(db)
	articleCache := cache.NewArticleRedisCache(cmdable)
	articleRepository := repository.NewCacheArticleRepository(articleDao, articleCache, userDao)
	client := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer)
	interactiveCache := cache.NewInteractiveCache(cmdable)
	interactiveDAO := dao.NewInteractiveGORMDAO(db)
	interactiveRepository := repository.NewCacheInteractiveRepository(interactiveCache, interactiveDAO)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, loggerV1, interactiveService)
	engine := ioc.InitWebServer(v, userHandler, oAuth2Handler, articleHandler)
	interactiveReadEventConsumer := article.NewInteractiveReadEventConsumer(interactiveRepository, client, loggerV1)
	v3 := ioc.InitConsumers(interactiveReadEventConsumer)
	app := &App{
		server:    engine,
		consumers: v3,
	}
	return app
}

func InitResponseTimeFailover() *failover.ResponseTimeFailover {
	v := ioc.NewSMSS()
	cmdable := ioc.InitRedis()
	limiter := ioc.InitRedisLimiter(cmdable)
	responseTimeFailover := ioc.InitFailoverService(v, limiter)
	return responseTimeFailover
}

// wire.go:

var interactiveSvcSet = wire.NewSet(service.NewInteractiveService, repository.NewCacheInteractiveRepository, cache.NewInteractiveCache, dao.NewInteractiveGORMDAO)
